import React, { useState } from 'react';
import {
  Card,
  CardContent,
  Typography,
  Box,
  TextField,
  Button,
  Grid,
  Alert,
  FormControl,
  FormLabel,
  RadioGroup,
  FormControlLabel,
  Radio,
  Divider,
  Chip,
  Paper,
  IconButton,
  Tooltip,
} from '@mui/material';
import {
  Add,
  ContentCopy,
  CheckCircle,
  Info,
  Warning,
} from '@mui/icons-material';
import { apiService } from '../services/api';

const AssetCreation: React.FC = () => {
  const [formData, setFormData] = useState({
    source: '1JXeYvPctZYLsFYcVyhuY2qsM3un7BMQmn',
    asset: '',
    quantity: 10,
    description: '{"p":"brc-20","op":"mint","tick":"ordi","amt":"10"}',
    divisible: true,
  });
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [copied, setCopied] = useState(false);

  const handleInputChange = (field: string) => (event: React.ChangeEvent<HTMLInputElement>) => {
    setFormData(prev => ({
      ...prev,
      [field]: event.target.value
    }));
  };

  const handleDivisibleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setFormData(prev => ({
      ...prev,
      divisible: event.target.value === 'true'
    }));
  };

  const generateAssetName = (type: 'numeric' | 'named') => {
    const timestamp = Date.now().toString();
    if (type === 'numeric') {
      return `A${timestamp}`;
    } else {
      return `ASSETNAME${timestamp}`;
    }
  };

  const handleCreateAsset = async () => {
    try {
      setLoading(true);
      setError(null);
      setResult(null);

      const response = await apiService.createIssuance({
        source: formData.source,
        asset: formData.asset,
        quantity: formData.quantity,
        description: formData.description,
        divisible: formData.divisible,
      });

      if (response.error) {
        setError(response.error);
      } else {
        setResult(response.result);
      }
    } catch (err) {
      setError('Failed to create asset. Please check your inputs and try again.');
      console.error('Asset creation error:', err);
    } finally {
      setLoading(false);
    }
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
    }
  };

  const isNumericAsset = formData.asset.startsWith('A') && /^A\d+$/.test(formData.asset);
  const isNamedAsset = formData.asset.startsWith('ASSETNAME') || (!isNumericAsset && formData.asset.length > 0);

  return (
    <Box>
      <Typography variant="h5" component="h2" sx={{ fontWeight: 600, mb: 3 }}>
        Create New Asset
      </Typography>

      <Grid container spacing={3}>
        {/* Asset Creation Form */}
        <Grid item xs={12} md={8}>
          <Card>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 3, display: 'flex', alignItems: 'center' }}>
                <Add sx={{ mr: 1 }} />
                Asset Configuration
              </Typography>

              <Grid container spacing={3}>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Source Address"
                    value={formData.source}
                    onChange={handleInputChange('source')}
                    helperText="The address that will own the created asset"
                    variant="outlined"
                  />
                </Grid>

                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Asset Name"
                    value={formData.asset}
                    onChange={handleInputChange('asset')}
                    helperText="Numeric assets start with 'A' followed by numbers. Named assets start with 'ASSETNAME' or any other name."
                    variant="outlined"
                    required
                  />
                </Grid>

                <Grid item xs={12} md={6}>
                  <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
                    <Button
                      variant="outlined"
                      size="small"
                      onClick={() => setFormData(prev => ({ ...prev, asset: generateAssetName('numeric') }))}
                    >
                      Generate Numeric
                    </Button>
                    <Button
                      variant="outlined"
                      size="small"
                      onClick={() => setFormData(prev => ({ ...prev, asset: generateAssetName('named') }))}
                    >
                      Generate Named
                    </Button>
                  </Box>
                </Grid>

                <Grid item xs={12} md={6}>
                  <TextField
                    fullWidth
                    label="Quantity"
                    type="number"
                    value={formData.quantity}
                    onChange={handleInputChange('quantity')}
                    helperText="Initial supply of the asset"
                    variant="outlined"
                    required
                  />
                </Grid>

                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Description (BRC-20 Inscription)"
                    value={formData.description}
                    onChange={handleInputChange('description')}
                    helperText="JSON string for BRC-20 inscription"
                    variant="outlined"
                    multiline
                    rows={3}
                  />
                </Grid>

                <Grid item xs={12}>
                  <FormControl component="fieldset">
                    <FormLabel component="legend">Asset Type</FormLabel>
                    <RadioGroup
                      value={formData.divisible.toString()}
                      onChange={handleDivisibleChange}
                      row
                    >
                      <FormControlLabel
                        value="true"
                        control={<Radio />}
                        label="Divisible (can be split into smaller units)"
                      />
                      <FormControlLabel
                        value="false"
                        control={<Radio />}
                        label="Indivisible (whole units only)"
                      />
                    </RadioGroup>
                  </FormControl>
                </Grid>

                <Grid item xs={12}>
                  <Button
                    variant="contained"
                    size="large"
                    onClick={handleCreateAsset}
                    disabled={loading || !formData.asset || !formData.source}
                    startIcon={<Add />}
                    fullWidth
                  >
                    {loading ? 'Creating Asset...' : 'Create Asset'}
                  </Button>
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        </Grid>

        {/* Asset Information Panel */}
        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>
                <Info sx={{ mr: 1 }} />
                Asset Information
              </Typography>

              <Box sx={{ mb: 2 }}>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Asset Type:
                </Typography>
                <Chip
                  label={isNumericAsset ? 'Numeric Asset' : isNamedAsset ? 'Named Asset' : 'Unknown'}
                  color={isNumericAsset ? 'primary' : isNamedAsset ? 'secondary' : 'default'}
                  size="small"
                />
              </Box>

              <Box sx={{ mb: 2 }}>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Divisibility:
                </Typography>
                <Chip
                  label={formData.divisible ? 'Divisible' : 'Indivisible'}
                  color={formData.divisible ? 'success' : 'warning'}
                  size="small"
                />
              </Box>

              <Divider sx={{ my: 2 }} />

              <Alert severity="info" sx={{ mb: 2 }}>
                <Typography variant="body2">
                  <strong>Numeric Assets:</strong> Free to create, start with 'A' + numbers
                </Typography>
              </Alert>

              <Alert severity="warning" sx={{ mb: 2 }}>
                <Typography variant="body2">
                  <strong>Named Assets:</strong> Cost 0.5 XCP to create
                </Typography>
              </Alert>

              <Alert severity="success">
                <Typography variant="body2">
                  <strong>BRC-20:</strong> Your asset will include the specified inscription
                </Typography>
              </Alert>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Results */}
      {error && (
        <Alert severity="error" sx={{ mt: 3 }}>
          {error}
        </Alert>
      )}

      {result && (
        <Card sx={{ mt: 3 }}>
          <CardContent>
            <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>
              <CheckCircle color="success" sx={{ mr: 1 }} />
              Transaction Created Successfully
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
              Your asset creation transaction has been generated. The transaction hex is:
            </Typography>
            <Paper
              variant="outlined"
              sx={{
                p: 2,
                backgroundColor: 'grey.50',
                fontFamily: 'monospace',
                fontSize: '0.875rem',
                wordBreak: 'break-all',
                position: 'relative',
              }}
            >
              {result}
              <Tooltip title={copied ? 'Copied!' : 'Copy to clipboard'}>
                <IconButton
                  size="small"
                  onClick={() => copyToClipboard(result)}
                  sx={{ position: 'absolute', top: 8, right: 8 }}
                >
                  <ContentCopy fontSize="small" />
                </IconButton>
              </Tooltip>
            </Paper>
            <Alert severity="info" sx={{ mt: 2 }}>
              <Typography variant="body2">
                <strong>Next Steps:</strong> Sign this transaction with your wallet and broadcast it to complete the asset creation.
              </Typography>
            </Alert>
          </CardContent>
        </Card>
      )}
    </Box>
  );
};

export default AssetCreation;
import React, { useState, useEffect } from 'react';
import {
  Card,
  CardContent,
  Typography,
  Box,
  TextField,
  Button,
  Grid,
  Chip,
  Alert,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  InputAdornment,
} from '@mui/material';
import {
  Search,
  Refresh,
  AccountBalance,
  TrendingUp,
} from '@mui/icons-material';
import { apiService, Balance } from '../services/api';

const Balances: React.FC = () => {
  const [balances, setBalances] = useState<Balance[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [searchAsset, setSearchAsset] = useState('');
  const [searchAddress, setSearchAddress] = useState('');

  const fetchBalances = async (assetFilter?: string, addressFilter?: string) => {
    try {
      setLoading(true);
      setError(null);
      
      const filters = [];
      if (assetFilter) {
        filters.push({ field: 'asset', op: '==', value: assetFilter });
      }
      if (addressFilter) {
        filters.push({ field: 'address', op: '==', value: addressFilter });
      }

      const response = await apiService.getBalances(filters);
      setBalances(response.result);
    } catch (err) {
      setError('Failed to fetch balances');
      console.error('Balances fetch error:', err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchBalances();
  }, []);

  const handleSearch = () => {
    fetchBalances(searchAsset || undefined, searchAddress || undefined);
  };

  const handleClearFilters = () => {
    setSearchAsset('');
    setSearchAddress('');
    fetchBalances();
  };

  const totalValue = balances.reduce((sum, balance) => sum + balance.quantity, 0);
  const uniqueAssets = new Set(balances.map(b => b.asset)).size;
  const uniqueAddresses = new Set(balances.map(b => b.address)).size;

  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h5" component="h2" sx={{ fontWeight: 600 }}>
          Balance Overview
        </Typography>
        <IconButton onClick={() => fetchBalances()} color="primary" size="large">
          <Refresh />
        </IconButton>
      </Box>

      {/* Summary Cards */}
      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                <AccountBalance color="primary" sx={{ mr: 1 }} />
                <Typography variant="h6">Total Value</Typography>
              </Box>
              <Typography variant="h4" color="primary" sx={{ fontWeight: 700 }}>
                {totalValue.toLocaleString()}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                <TrendingUp color="secondary" sx={{ mr: 1 }} />
                <Typography variant="h6">Unique Assets</Typography>
              </Box>
              <Typography variant="h4" color="secondary" sx={{ fontWeight: 700 }}>
                {uniqueAssets}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                <AccountBalance color="info" sx={{ mr: 1 }} />
                <Typography variant="h6">Addresses</Typography>
              </Box>
              <Typography variant="h4" color="info.main" sx={{ fontWeight: 700 }}>
                {uniqueAddresses}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Search Filters */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Typography variant="h6" sx={{ mb: 2 }}>
            Filter Balances
          </Typography>
          <Grid container spacing={2} alignItems="center">
            <Grid item xs={12} md={4}>
              <TextField
                fullWidth
                label="Search by Asset"
                value={searchAsset}
                onChange={(e) => setSearchAsset(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <Search />
                    </InputAdornment>
                  ),
                }}
              />
            </Grid>
            <Grid item xs={12} md={4}>
              <TextField
                fullWidth
                label="Search by Address"
                value={searchAddress}
                onChange={(e) => setSearchAddress(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <Search />
                    </InputAdornment>
                  ),
                }}
              />
            </Grid>
            <Grid item xs={12} md={4}>
              <Box sx={{ display: 'flex', gap: 1 }}>
                <Button
                  variant="contained"
                  onClick={handleSearch}
                  disabled={loading}
                  startIcon={<Search />}
                >
                  Search
                </Button>
                <Button
                  variant="outlined"
                  onClick={handleClearFilters}
                  disabled={loading}
                >
                  Clear
                </Button>
              </Box>
            </Grid>
          </Grid>
        </CardContent>
      </Card>

      {/* Error Display */}
      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      {/* Balances Table */}
      <Card>
        <CardContent>
          <Typography variant="h6" sx={{ mb: 2 }}>
            Balance Details
          </Typography>
          {loading ? (
            <Typography>Loading balances...</Typography>
          ) : balances.length === 0 ? (
            <Typography color="text.secondary">
              No balances found. Try adjusting your search filters.
            </Typography>
          ) : (
            <TableContainer component={Paper} variant="outlined">
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell><strong>Address</strong></TableCell>
                    <TableCell><strong>Asset</strong></TableCell>
                    <TableCell align="right"><strong>Quantity</strong></TableCell>
                    <TableCell><strong>Type</strong></TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {balances.map((balance, index) => (
                    <TableRow key={index} hover>
                      <TableCell>
                        <Typography variant="body2" sx={{ fontFamily: 'monospace' }}>
                          {balance.address}
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <Chip
                          label={balance.asset}
                          color="primary"
                          variant="outlined"
                          size="small"
                        />
                      </TableCell>
                      <TableCell align="right">
                        <Typography variant="body1" sx={{ fontWeight: 500 }}>
                          {balance.quantity.toLocaleString()}
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <Chip
                          label={balance.asset === 'XCP' ? 'Protocol Token' : 'Custom Asset'}
                          color={balance.asset === 'XCP' ? 'secondary' : 'default'}
                          size="small"
                        />
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </CardContent>
      </Card>
    </Box>
  );
};

export default Balances;
import React, { useState, useEffect } from 'react';
import {
  Grid,
  Card,
  CardContent,
  Typography,
  Box,
  Chip,
  LinearProgress,
  Alert,
  Button,
  IconButton,
} from '@mui/material';
import {
    TrendingUp,
    AccountBalance,
    MonetizationOn,  // replaced TokenIcon
    Receipt,
    Refresh,
    CheckCircle,
    Error,
  } from '@mui/icons-material';
import { apiService, BlockchainState } from '../services/api';

const Dashboard: React.FC = () => {
  const [state, setState] = useState<BlockchainState | null>(null);
  const [health, setHealth] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const [healthData, stateData] = await Promise.all([
        apiService.getHealth(),
        apiService.getState(),
      ]);
      
      setHealth(healthData);
      setState(stateData);
    } catch (err) {
      setError('Failed to fetch data. Make sure the API is running.');
      console.error('Dashboard fetch error:', err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  if (loading) {
    return (
      <Box>
        <LinearProgress sx={{ mb: 2 }} />
        <Typography>Loading dashboard data...</Typography>
      </Box>
    );
  }

  if (error) {
    return (
      <Alert 
        severity="error" 
        action={
          <Button color="inherit" size="small" onClick={fetchData}>
            Retry
          </Button>
        }
      >
        {error}
      </Alert>
    );
  }

  const totalAssets = state ? Object.keys(state.assets).length : 0;
  const totalAddresses = state ? Object.keys(state.balances).length : 0;
  const totalTransactions = state ? state.transactions : 0;

  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h5" component="h2" sx={{ fontWeight: 600 }}>
          System Overview
        </Typography>
        <IconButton onClick={fetchData} color="primary" size="large">
          <Refresh />
        </IconButton>
      </Box>

      <Grid container spacing={3}>
        {/* API Status */}
        <Grid item xs={12} md={6}>
          <Card sx={{ height: '100%' }}>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <CheckCircle color="success" sx={{ mr: 1 }} />
                <Typography variant="h6" component="h3">
                  API Status
                </Typography>
              </Box>
              <Chip 
                label={health?.status || 'Unknown'} 
                color="success" 
                variant="outlined"
                sx={{ mb: 2 }}
              />
              <Typography variant="body2" color="text.secondary">
                Network: {health?.network?.bech32 || 'Unknown'}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Last Update: {health?.timestamp ? new Date(health.timestamp).toLocaleString() : 'Unknown'}
              </Typography>
            </CardContent>
          </Card>
        </Grid>

        {/* Total Assets */}
        <Grid item xs={12} md={6}>
          <Card sx={{ height: '100%' }}>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <MonetizationOn color="primary" sx={{ mr: 1 }} />
                <Typography variant="h6" component="h3">
                  Total Assets
                </Typography>
              </Box>
              <Typography variant="h3" component="div" color="primary" sx={{ fontWeight: 700 }}>
                {totalAssets}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Assets created on the platform
              </Typography>
            </CardContent>
          </Card>
        </Grid>

        {/* Active Addresses */}
        <Grid item xs={12} md={6}>
          <Card sx={{ height: '100%' }}>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <AccountBalance color="secondary" sx={{ mr: 1 }} />
                <Typography variant="h6" component="h3">
                  Active Addresses
                </Typography>
              </Box>
              <Typography variant="h3" component="div" color="secondary" sx={{ fontWeight: 700 }}>
                {totalAddresses}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Addresses with balances
              </Typography>
            </CardContent>
          </Card>
        </Grid>

        {/* Total Transactions */}
        <Grid item xs={12} md={6}>
          <Card sx={{ height: '100%' }}>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <Receipt color="info" sx={{ mr: 1 }} />
                <Typography variant="h6" component="h3">
                  Total Transactions
                </Typography>
              </Box>
              <Typography variant="h3" component="div" color="info.main" sx={{ fontWeight: 700 }}>
                {totalTransactions}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Transactions processed
              </Typography>
            </CardContent>
          </Card>
        </Grid>

        {/* Recent Assets */}
        <Grid item xs={12}>
          <Card>
            <CardContent>
              <Typography variant="h6" component="h3" sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>
                <TrendingUp sx={{ mr: 1 }} />
                Recent Assets
              </Typography>
              {state && Object.keys(state.assets).length > 0 ? (
                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                  {Object.values(state.assets).slice(0, 6).map((asset) => (
                    <Chip
                      key={asset.asset}
                      label={`${asset.asset} (${asset.supply})`}
                      variant="outlined"
                      color="primary"
                      size="small"
                    />
                  ))}
                </Box>
              ) : (
                <Typography variant="body2" color="text.secondary">
                  No assets created yet
                </Typography>
              )}
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
};

export default Dashboard;
import React, { useState } from 'react';
import { Box, Tabs, Tab, Paper } from '@mui/material';
import DashboardIcon from '@mui/icons-material/Dashboard';
import AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';
import AddIcon from '@mui/icons-material/Add';
import SendIcon from '@mui/icons-material/Send';
import SettingsIcon from '@mui/icons-material/Settings';
import Dashboard from './Dashboard';
import Balances from './Balances';
import AssetCreation from './AssetCreation';
import Transactions from './Transactions';
import Settings from './Settings';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

function a11yProps(index: number) {
  return {
    id: `simple-tab-${index}`,
    'aria-controls': `simple-tabpanel-${index}`,
  };
}

const MainTabs: React.FC = () => {
  const [value, setValue] = useState(0);

  const handleChange = (event: React.SyntheticEvent, newValue: number) => {
    setValue(newValue);
  };

  return (
    <Paper elevation={2} sx={{ borderRadius: 3, overflow: 'hidden' }}>
      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
        <Tabs
          value={value}
          onChange={handleChange}
          aria-label="main navigation tabs"
          variant="fullWidth"
          sx={{
            '& .MuiTab-root': {
              minHeight: 64,
              textTransform: 'none',
              fontSize: '0.95rem',
              fontWeight: 500,
            },
          }}
        >
          <Tab
            icon={<DashboardIcon />}
            label="Dashboard"
            iconPosition="start"
            {...a11yProps(0)}
          />
          <Tab
            icon={<AccountBalanceWalletIcon />}
            label="Balances"
            iconPosition="start"
            {...a11yProps(1)}
          />
          <Tab
            icon={<AddIcon />}
            label="Create Asset"
            iconPosition="start"
            {...a11yProps(2)}
          />
          <Tab
            icon={<SendIcon />}
            label="Transactions"
            iconPosition="start"
            {...a11yProps(3)}
          />
          <Tab
            icon={<SettingsIcon />}
            label="Settings"
            iconPosition="start"
            {...a11yProps(4)}
          />
        </Tabs>
      </Box>

      <TabPanel value={value} index={0}>
        <Dashboard />
      </TabPanel>
      <TabPanel value={value} index={1}>
        <Balances />
      </TabPanel>
      <TabPanel value={value} index={2}>
        <AssetCreation />
      </TabPanel>
      <TabPanel value={value} index={3}>
        <Transactions />
      </TabPanel>
      <TabPanel value={value} index={4}>
        <Settings />
      </TabPanel>
    </Paper>
  );
};

export default MainTabs;
import React, { useState, useEffect } from 'react';
import {
  Card,
  CardContent,
  Typography,
  Box,
  Button,
  Grid,
  Alert,
  Divider,
  Chip,
  Paper,
  IconButton,
  Tooltip,
} from '@mui/material';
import {
  Settings,
  Refresh,
  Warning,
  CheckCircle,
  Info,
  RestartAlt,
} from '@mui/icons-material';
import { apiService } from '../services/api';

const Settings: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [health, setHealth] = useState<any>(null);

  const fetchHealth = async () => {
    try {
      const healthData = await apiService.getHealth();
      setHealth(healthData);
    } catch (err) {
      console.error('Failed to fetch health:', err);
    }
  };

  useEffect(() => {
    fetchHealth();
  }, []);

  const handleResetState = async () => {
    if (!window.confirm('Are you sure you want to reset the blockchain state? This will delete all assets and transactions!')) {
      return;
    }

    try {
      setLoading(true);
      setError(null);
      setSuccess(null);

      const response = await apiService.resetState();
      setSuccess('Blockchain state has been reset successfully!');
      
      // Refresh health data
      setTimeout(() => {
        fetchHealth();
      }, 1000);
    } catch (err) {
      setError('Failed to reset blockchain state');
      console.error('Reset error:', err);
    } finally {
      setLoading(false);
    }
  };

  const clearMessages = () => {
    setError(null);
    setSuccess(null);
  };

  return (
    <Box>
      <Typography variant="h5" component="h2" sx={{ fontWeight: 600, mb: 3 }}>
        System Settings
      </Typography>

      <Grid container spacing={3}>
        {/* System Status */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>
                <Settings sx={{ mr: 1 }} />
                System Status
              </Typography>

              {health ? (
                <Box>
                  <Box sx={{ mb: 2 }}>
                    <Typography variant="body2" color="text.secondary" gutterBottom>
                      API Status:
                    </Typography>
                    <Chip
                      label={health.status}
                      color="success"
                      variant="outlined"
                    />
                  </Box>

                  <Box sx={{ mb: 2 }}>
                    <Typography variant="body2" color="text.secondary" gutterBottom>
                      Network:
                    </Typography>
                    <Chip
                      label={health.network?.bech32 || 'Unknown'}
                      color="primary"
                      variant="outlined"
                    />
                  </Box>

                  <Box sx={{ mb: 2 }}>
                    <Typography variant="body2" color="text.secondary" gutterBottom>
                      Assets Count:
                    </Typography>
                    <Chip
                      label={health.assets_count}
                      color="info"
                      variant="outlined"
                    />
                  </Box>

                  <Box sx={{ mb: 2 }}>
                    <Typography variant="body2" color="text.secondary" gutterBottom>
                      Addresses Count:
                    </Typography>
                    <Chip
                      label={health.addresses_count}
                      color="secondary"
                      variant="outlined"
                    />
                  </Box>

                  <Box sx={{ mb: 2 }}>
                    <Typography variant="body2" color="text.secondary" gutterBottom>
                      Last Update:
                    </Typography>
                    <Typography variant="body2">
                      {health.timestamp ? new Date(health.timestamp).toLocaleString() : 'Unknown'}
                    </Typography>
                  </Box>

                  <Button
                    variant="outlined"
                    startIcon={<Refresh />}
                    onClick={fetchHealth}
                    size="small"
                  >
                    Refresh Status
                  </Button>
                </Box>
              ) : (
                <Typography color="text.secondary">
                  Loading system status...
                </Typography>
              )}
            </CardContent>
          </Card>
        </Grid>

        {/* API Configuration */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>
                <Info sx={{ mr: 1 }} />
                API Configuration
              </Typography>

              <Box sx={{ mb: 2 }}>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  API URL:
                </Typography>
                <Paper
                  variant="outlined"
                  sx={{
                    p: 1,
                    backgroundColor: 'grey.50',
                    fontFamily: 'monospace',
                    fontSize: '0.875rem',
                  }}
                >
                  http://localhost:4000/api/
                </Paper>
              </Box>

              <Box sx={{ mb: 2 }}>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Authentication:
                </Typography>
                <Chip
                  label="Basic Auth (local:localpass)"
                  color="warning"
                  variant="outlined"
                  size="small"
                />
              </Box>

              <Box sx={{ mb: 2 }}>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Network Mode:
                </Typography>
                <Chip
                  label="Regtest"
                  color="info"
                  variant="outlined"
                  size="small"
                />
              </Box>

              <Alert severity="info" sx={{ mt: 2 }}>
                <Typography variant="body2">
                  This is a local development environment. All data is stored in memory and will be lost when the server restarts.
                </Typography>
              </Alert>
            </CardContent>
          </Card>
        </Grid>

        {/* Danger Zone */}
        <Grid item xs={12}>
          <Card sx={{ border: '2px solid', borderColor: 'error.main' }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', color: 'error.main' }}>
                <Warning sx={{ mr: 1 }} />
                Danger Zone
              </Typography>

              <Alert severity="warning" sx={{ mb: 3 }}>
                <Typography variant="body2">
                  <strong>Warning:</strong> The following actions are irreversible and will delete all blockchain data.
                </Typography>
              </Alert>

              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <Button
                  variant="contained"
                  color="error"
                  onClick={handleResetState}
                  disabled={loading}
                  startIcon={<RestartAlt />}
                >
                  {loading ? 'Resetting...' : 'Reset Blockchain State'}
                </Button>
                <Typography variant="body2" color="text.secondary">
                  This will delete all assets, balances, and transactions
                </Typography>
              </Box>
            </CardContent>
          </Card>
        </Grid>

        {/* Messages */}
        {error && (
          <Grid item xs={12}>
            <Alert 
              severity="error" 
              action={
                <IconButton color="inherit" size="small" onClick={clearMessages}>
                  ×
                </IconButton>
              }
            >
              {error}
            </Alert>
          </Grid>
        )}

        {success && (
          <Grid item xs={12}>
            <Alert 
              severity="success" 
              action={
                <IconButton color="inherit" size="small" onClick={clearMessages}>
                  ×
                </IconButton>
              }
            >
              {success}
            </Alert>
          </Grid>
        )}
      </Grid>
    </Box>
  );
};

export default Settings;
import React, { useState, useEffect } from 'react';
import {
  Card,
  CardContent,
  Typography,
  Box,
  TextField,
  Button,
  Grid,
  Alert,
  Paper,
  IconButton,
  Tooltip,
  Chip,
  Divider,
} from '@mui/material';
import {
  Send,
  ContentCopy,
  CheckCircle,
  Refresh,
  Receipt,
} from '@mui/icons-material';
import { apiService, BlockchainState } from '../services/api';

const Transactions: React.FC = () => {
  const [txHex, setTxHex] = useState('');
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [state, setState] = useState<BlockchainState | null>(null);
  const [copied, setCopied] = useState(false);

  const fetchState = async () => {
    try {
      const stateData = await apiService.getState();
      setState(stateData);
    } catch (err) {
      console.error('Failed to fetch state:', err);
    }
  };

  useEffect(() => {
    fetchState();
  }, []);

  const handleBroadcast = async () => {
    if (!txHex.trim()) {
      setError('Please enter a transaction hex');
      return;
    }

    try {
      setLoading(true);
      setError(null);
      setResult(null);

      const response = await apiService.broadcastTx(txHex.trim());
      
      if (response.error) {
        setError(response.error);
      } else {
        setResult(response.result);
        setTxHex(''); // Clear the input
        fetchState(); // Refresh state to show new transaction
      }
    } catch (err) {
      setError('Failed to broadcast transaction. Please check the transaction hex and try again.');
      console.error('Broadcast error:', err);
    } finally {
      setLoading(false);
    }
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
    }
  };

  const pasteFromClipboard = async () => {
    try {
      const text = await navigator.clipboard.readText();
      setTxHex(text);
    } catch (err) {
      console.error('Failed to read from clipboard:', err);
    }
  };

  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h5" component="h2" sx={{ fontWeight: 600 }}>
          Transaction Broadcasting
        </Typography>
        <IconButton onClick={fetchState} color="primary" size="large">
          <Refresh />
        </IconButton>
      </Box>

      <Grid container spacing={3}>
        {/* Broadcast Transaction */}
        <Grid item xs={12} md={8}>
          <Card>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 3, display: 'flex', alignItems: 'center' }}>
                <Send sx={{ mr: 1 }} />
                Broadcast Transaction
              </Typography>

              <Box sx={{ mb: 3 }}>
                <TextField
                  fullWidth
                  label="Transaction Hex"
                  value={txHex}
                  onChange={(e) => setTxHex(e.target.value)}
                  multiline
                  rows={6}
                  variant="outlined"
                  placeholder="Paste your signed transaction hex here..."
                  helperText="Enter the complete transaction hex from your wallet or the asset creation process"
                />
              </Box>

              <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>
                <Button
                  variant="contained"
                  onClick={handleBroadcast}
                  disabled={loading || !txHex.trim()}
                  startIcon={<Send />}
                >
                  {loading ? 'Broadcasting...' : 'Broadcast Transaction'}
                </Button>
                <Button
                  variant="outlined"
                  onClick={pasteFromClipboard}
                  startIcon={<ContentCopy />}
                >
                  Paste from Clipboard
                </Button>
              </Box>

              {/* Error Display */}
              {error && (
                <Alert severity="error" sx={{ mb: 2 }}>
                  {error}
                </Alert>
              )}

              {/* Success Result */}
              {result && (
                <Alert severity="success" sx={{ mb: 2 }}>
                  <Typography variant="body1" sx={{ fontWeight: 500 }}>
                    Transaction broadcast successfully!
                  </Typography>
                  <Typography variant="body2">
                    Transaction ID: {result}
                  </Typography>
                </Alert>
              )}
            </CardContent>
          </Card>
        </Grid>

        {/* Transaction Info */}
        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>
                <Receipt sx={{ mr: 1 }} />
                Transaction Info
              </Typography>

              {state && (
                <Box>
                  <Box sx={{ mb: 2 }}>
                    <Typography variant="body2" color="text.secondary" gutterBottom>
                      Total Transactions:
                    </Typography>
                    <Chip
                      label={state.transactions}
                      color="primary"
                      variant="outlined"
                    />
                  </Box>

                  <Box sx={{ mb: 2 }}>
                    <Typography variant="body2" color="text.secondary" gutterBottom>
                      Total Issuances:
                    </Typography>
                    <Chip
                      label={state.issuances}
                      color="secondary"
                      variant="outlined"
                    />
                  </Box>

                  <Divider sx={{ my: 2 }} />

                  <Alert severity="info" sx={{ mb: 2 }}>
                    <Typography variant="body2">
                      <strong>Note:</strong> Make sure your transaction is properly signed before broadcasting.
                    </Typography>
                  </Alert>

                  <Alert severity="warning">
                    <Typography variant="body2">
                      <strong>Warning:</strong> Broadcasting an invalid transaction will result in an error.
                    </Typography>
                  </Alert>
                </Box>
              )}
            </CardContent>
          </Card>
        </Grid>

        {/* Transaction History */}
        <Grid item xs={12}>
          <Card>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2 }}>
                Recent Activity
              </Typography>
              {state && state.transactions > 0 ? (
                <Box>
                  <Typography variant="body1" color="text.secondary">
                    {state.transactions} transaction{state.transactions !== 1 ? 's' : ''} processed
                  </Typography>
                  <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                    {state.issuances} asset issuance{state.issuances !== 1 ? 's' : ''} completed
                  </Typography>
                </Box>
              ) : (
                <Typography variant="body2" color="text.secondary">
                  No transactions yet. Create and broadcast your first asset!
                </Typography>
              )}
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
};

export default Transactions;
